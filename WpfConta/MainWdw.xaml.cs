using Conta.Dal;
using Conta.Model;
using Conta.UiController.Controller;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Threading;

namespace WpfConta {
    /// <summary>
    /// Interaction logic for MainWdw.xaml
    /// </summary>
    public partial class MainWdw : Window, IMainView {
        private readonly MainController controller;
        private DetailGridBuilder detailCtrl;

        public MainWdw() {
            InitializeComponent();

            this.CommandBindings.Add(new CommandBinding(ApplicationCommands.Open,
                Back_Executed, Back_CanExecute));

            //theGrid.AutoGeneratingColumn += theGrid_AutoGeneratingColumn;
            controller = new MainController(this);
            DataContext = controller;
            JumpToProject_Click(this, null);
        }

        void theGrid_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e) {
            //Debug.WriteLine("AutoGeneratingColumn(" + e.PropertyName + ")");
            var prop = controller.CurrentType.GetProperty(e.PropertyName);
            if (prop == null) return;
            var attrs = prop.GetCustomAttributes(typeof(BrowsableAttribute), true);
            if (attrs.Length != 0)
                e.Cancel = !(attrs[0] as BrowsableAttribute).Browsable;
            if (e.Cancel) return;
            //DataGridComboBoxColumn
            if (e.Column is DataGridBoundColumn) {
                var column = e.Column as DataGridBoundColumn;

                attrs = prop.GetCustomAttributes(typeof(LookupBoundPropertyAttribute), true);
                if (attrs.Length == 0) {
                    column.Binding = new Binding(e.PropertyName) {
                        NotifyOnValidationError = true,
                        UpdateSourceTrigger = UpdateSourceTrigger.LostFocus,
                        ValidatesOnDataErrors = true,
                    };
                } else {
                    var lookupAttribute = attrs[0] as LookupBoundPropertyAttribute;
                    //         <ComboBox Name="combo" DisplayMemberPath="value" SelectedValuePath="key" SelectedValue="{Binding combo}" ItemsSource="{Binding items}"/>
                    var lookupColumn = new DataGridComboBoxColumn {
                        Header = column.Header,
                        DisplayMemberPath = lookupAttribute.DisplayMember,
                        //IsAutoGenerated = true,
                        SelectedValuePath = lookupAttribute.LookupMember,
                        SelectedValueBinding = new Binding(e.PropertyName),
                    };
                    //lookupColumn.ItemsSource = GetService(lookupAttribute.DataSource);
                    lookupColumn.ItemsSource = UiProjectCategory.ServiceCreator().GetList();

                    e.Column = lookupColumn;
                }
            }
        }

        #region IMainView Members
        public object GridDataSource {
            set {
                if (this.detailCtrl != null) this.detailCtrl.Dispose();
                foreach (var item in (value as IList)) {
                    this.detailCtrl = DetailGridBuilder.Build(this.DetailsGrid, this.DetailBorder, item.GetType(), this.theGrid);
                    break;
                }

                //theGrid.Columns.Clear();
                // TODO : add IsGlobalSearch property
                //theGrid.ItemsSource = value as IList;
                theGrid.DataContext = value;
                //this.SetValue(Window.DataContextProperty, value);
                //DataSource = value as IList;
            }
        }

        public object GridDetailSource {
            set {
                var isDetail = value != null;
                var ProjectItems = isDetail ?
                    value as ObservableCollection<UiProjectItemsCategory> :
                    null;
                projectGrid.Visibility = isDetail ? Visibility.Visible : Visibility.Collapsed;
                //this.projectGrid.ItemsSource = ProjectItems;
                this.projectGrid.DataContext = ProjectItems;
            }
        }

        public bool GridReadOnly {
            set { /* built-in by design */ }
        }

        public int DetailDataSourceIndex {
            set { /* no need : detail items bound directly to grid's selection */ }
        }

        public void SetDetail(Type type) {
            /* no need : detail items bound directly to grid's selection */
        }

        public void SetRowStatus(int index, RowStatus status) {
            // built-in by design 
        }

        public void SetSelection(IUiBase item) {
            theGrid.SelectedItem = item;
        }

        public void SetDetailSelection(IUiBase item) {
            var detail = item as UiProjectItemDetail;
            Debug.Assert(detail != null);
            foreach (UiProjectItemsCategory category in this.projectGrid.Items)
                if (category.Details.Contains(detail)) {
                    theGrid.SelectedItem = item;
                    break;
                }
        }

        public MessageActions ShowMessage(string title, string message, MessageActions action) {
            var msgButton =
                action == (MessageActions.Ok | MessageActions.Cancel) ? MessageBoxButton.OKCancel :
                action == (MessageActions.Yes | MessageActions.No) ? MessageBoxButton.YesNo :
                action == (MessageActions.Yes | MessageActions.No | MessageActions.Cancel) ? MessageBoxButton.YesNoCancel :
                MessageBoxButton.OK;
            var result = MessageBox.Show(message, title, msgButton);
            return result == MessageBoxResult.OK ? MessageActions.Ok :
                result == MessageBoxResult.Yes ? MessageActions.Yes :
                result == MessageBoxResult.No ? MessageActions.No :
                result == MessageBoxResult.Cancel ? MessageActions.Cancel :
                MessageActions.None;
        }

        public void SetReports(IEnumerable<string> headers) {
            foreach (MenuItem menuItem in this.Reports.Items)
                menuItem.Click -= Report_Click;

            this.Reports.Items.Clear();
            if (headers == null) return;

            foreach (var header in headers) {
                var menuItem = new MenuItem {
                    Header = header,
                    IsEnabled = true,
                };
                menuItem.Click += Report_Click;
                Reports.Items.Add(menuItem);
            }
        }

        void Report_Click(object sender, RoutedEventArgs e) {
            Mouse.OverrideCursor = Cursors.Wait;
            // TODO : start animation
            this.controller.ExecuteReport((sender as MenuItem).Header as string);
        }

        public void ShowReport(string contents) {
            // TODO : add transition & index constants
            FunctionTab.SelectedIndex = 1;

            ReportArea.NavigateToString(contents);
            // TODO : end animation
            Mouse.OverrideCursor = null;
        }
        #endregion

        private void FileExitMenu_Click(object sender, RoutedEventArgs e) {
            if (controller.CanClose())
                this.Close();
        }

        protected override void OnClosing(CancelEventArgs e) {
            e.Cancel = !controller.CanClose();
            base.OnClosing(e);
        }

        private void JumpToClient_Click(object sender, RoutedEventArgs e) {
            RaiseJumpTo(typeof(UiClient));
        }

        private void JumpToEmployee_Click(object sender, RoutedEventArgs e) {
            RaiseJumpTo(typeof(UiEmployee));
        }

        private void JumpToProject_Click(object sender, RoutedEventArgs e) {
            RaiseJumpTo(typeof(UiProject));
        }

        private void JumpToMaterials_Click(object sender, RoutedEventArgs e) {
            RaiseJumpTo(typeof(UiMaterial));
        }

        private void JumpToProjectCategories_Click(object sender, RoutedEventArgs e) {
            RaiseJumpTo(typeof(UiProjectCategory));
        }

        private void RaiseJumpTo(Type type, UiBase parent = null) {
            controller.SetDataType(type, parent);
        }

        private void Back_CanExecute(object sender, CanExecuteRoutedEventArgs e) { e.CanExecute = controller.HasParent; }

        private void Back_Executed(object sender, ExecutedRoutedEventArgs e) { /*!controller.GoBack();*/ }

        private void theGrid_SelectionChanged(object sender, SelectionChangedEventArgs e) {
            //foreach (var col in theGrid.Columns)
            //    Debug.WriteLine(col.Header + ":" + (e.AddedItems.Count > 0 ? e.AddedItems[0].GetType().Name : "?"));
            Debug.WriteLine("selection changed " + (e.Source == theGrid) + " / " + (sender == theGrid));
            //Debug.WriteLine("call SelectionChanged");
            this.controller.SelectionChanged(e.AddedItems.Count == 1 ?
                e.AddedItems[0] as UiBase :
                null);
            /*
            Debug.WriteLine("wait..." + Thread.CurrentThread.ManagedThreadId);
            try {
                Application.Current.Dispatcher.Invoke(DispatcherPriority.Background, new Action(delegate { })); // DoEvents
                //Application.Current.Dispatcher.Invoke(DispatcherPriority.Background, new Action(() => Debug.WriteLine("DoEvents " + Thread.CurrentThread.ManagedThreadId))); // DoEvents
            } catch (Exception ex) {
                Debug.WriteLine("DoEvents " + ex);
            }
            Debug.WriteLine("done..." + Thread.CurrentThread.ManagedThreadId);
            /* */

            this.detailCtrl.Rearrange();
        }

        private void projectGrid_SelectionChanged(object sender, SelectionChangedEventArgs e) {
            if (controller.DetailController != null)
                controller.DetailController.SelectionChanged(e.AddedItems.Count == 1 ?
                    e.AddedItems[0] as UiBase :
                    null);
        }

        private void ShowDetails(object sender, RoutedEventArgs e) {
            var model = (sender as Button).DataContext as UiProjectItemsCategory;
            Debug.WriteLine(model.Name);

            for (var vis = sender as Visual; vis != null; vis = VisualTreeHelper.GetParent(vis) as Visual) {
                Debug.WriteLine(vis.GetType().Name);
                if (vis is DataGridRow) {
                    var row = (DataGridRow)vis;
                    (sender as Button).Content = row.DetailsVisibility == Visibility.Visible ? "+" : "-";
                    row.DetailsVisibility = row.DetailsVisibility == Visibility.Visible ? Visibility.Collapsed : Visibility.Visible;
                    break;
                }
            }
        }

        private void SearchValue_KeyUp(object sender, System.Windows.Input.KeyEventArgs e) {
            //Debug.WriteLine(e.SystemKey + "/" + e.Key);   // None/Return
            if (e.Key == System.Windows.Input.Key.Return ||
                e.Key == System.Windows.Input.Key.Enter)
                //if (!string.IsNullOrEmpty(this.SearchValue.Text))
                controller.Search(this.SearchValue.Text);
        }

        private void ForwardList_Selection_Click(object sender, RoutedEventArgs e) {
            var btn = sender as Button;
            //Debug.WriteLine(btn.Content + " / " + btn.Tag);
            RaiseJumpTo(btn.Tag as Type, theGrid.SelectedItem as UiBase);
        }

        private void AboutMenu_Click(object sender, RoutedEventArgs e) {
            var dialog = new About();
            dialog.Owner = this;
            dialog.ShowDialog();
        }

        private void AddItem_Click(object sender, RoutedEventArgs e) {
            controller.AddNew();
        }

        private void DelItem_Click(object sender, RoutedEventArgs e) {
            controller.DeleteSelection();
        }

        private void CloseReportBtn_Click(object sender, RoutedEventArgs e) {
            // TODO : add transition
            FunctionTab.SelectedIndex = 0;
        }
    }

    public static class CustomCommands {
        public static readonly RoutedUICommand Back = new RoutedUICommand
                (
                        "_Back",
                        "BackName",
                        typeof(CustomCommands),
                        new InputGestureCollection(){
                            new KeyGesture(Key.B, ModifierKeys.Alt),
                        }
                );

        //Define more commands here, just like the one above
    }
}
